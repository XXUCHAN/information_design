from django.shortcuts import render
from rest_framework.viewsets import ModelViewSet
from .models import Item
from .serializers import ItemSerializer
import json
from django.views.decorators.csrf import csrf_exempt
from django.http import JsonResponse
import subprocess

@csrf_exempt  # CSRF 검사를 비활성화 (테스트용)
def echo_string(request):
    if request.method == 'POST':
        try:
            data = json.loads(request.body)  # 요청 바디에서 JSON 데이터 읽기
            input_string = data.get('input', '')  # 'input' 키의 값을 가져옴
            return JsonResponse({'output': input_string})  # 입력값을 반환
        except json.JSONDecodeError:
            return JsonResponse({'error': 'Invalid JSON'}, status=400)
    return JsonResponse({'error': 'Invalid request method'}, status=405)
class ItemViewSet(ModelViewSet):
    queryset = Item.objects.all()
    serializer_class = ItemSerializer









@csrf_exempt
def run_script(request):
    if request.method == "POST":
        try:
            # 요청 데이터 파싱
            data = json.loads(request.body)
            start_date = data.get("start_date")
            end_date = data.get("end_date")
            combination = ",".join(data.get("combination", []))  # 리스트를 콤마로 연결
            asset = data.get("asset", 1000)

            # 입력 검증
            if not start_date or not end_date or not combination:
                return JsonResponse({"error": "Invalid input data"}, status=400)

            # 스크립트 경로
            script_path = "/home/ubuntu/ID/backtesting/multi_all_combination_cache_final.py"

            # 스크립트 실행
            result = subprocess.run(
                [
                    "python3", script_path,
                    "--start_date", start_date,
                    "--end_date", end_date,
                    "--combination", combination,
                    "--asset", str(asset)
                ],
                capture_output=True,
                text=True,
                check=True,
                cwd="/home/ubuntu/ID/backtesting"
            )

            # 스크립트 출력(JSON 형식)을 읽어 반환
            output = result.stdout.strip()

            # 디버깅 로그 추가
            print(f"Script output: {output}")

            # JSON 변환
            response_data = json.loads(output)  # 스크립트가 JSON 형식으로 출력한다고 가정
            return JsonResponse(response_data)

        except subprocess.CalledProcessError as e:
            return JsonResponse({
                "error": f"Script execution failed: {e}",
                "stderr": e.stderr.strip(),
                "stdout": e.stdout.strip()
            }, status=500)

        except json.JSONDecodeError as e:
            return JsonResponse({
                "error": f"Invalid JSON output from script: {e}",
                "script_output": output
            }, status=500)

        except Exception as e:
            return JsonResponse({"error": str(e)}, status=500)
